import{d as I,u as x,r as v,i as T,k as P,S as V,o,c as n,a as e,e as p,f as c,y as B,j as $,F as d,N as h,A as m,ao as y,b as N,Q as i,aA as E,a3 as F,_ as j}from"./index-CkVLQWri.js";import{F as D}from"./FeedbackPanel-DWRWo6y_.js";import{I as S}from"./InputTextbox-10S61aZ7.js";const A={class:"constrain-width content"},L={class:"content-limit"},R={id:"information"},M={id:"dragons-to-check-form"},Q=["disabled"],U={id:"preview"},W={class:"preview"},q=["href"],z=["src","onError"],G=["onClick"],H={key:0,id:"results"},J={class:"checks"},K=["id"],O={class:"dragon"},X=["href"],Y=["src"],Z={class:"code"},ee={class:"result"},se={key:0,class:"warn"},te={key:1},oe={class:"conflicts"},ne=["href"],le=["src"],re={class:"code"},ae={class:"conflicts"},ie=["href"],ce=["src"],de={class:"code"},ue={class:"code"},pe={class:"conflict-list"},he=["onClick"],me=I({__name:"InbredChecker",setup(ge){const u=x("status"),f=v(""),_=v([]),b=v([]),g=T(()=>{try{return f.value.split(`
`).map(a=>a.trim()).filter(a=>!!a)}catch{return[]}});P(g,()=>{_.value=[]});async function C(){var a;if(u.value)try{const s=await E(g.value.filter(y));if(s.errors){if(u.value.update(s.errors),s.errors.some(r=>r.type==="error"))return}else u.value.close();b.value=s.checks.sort((r,t)=>r.problems.length+r.selfProblems.length-(t.problems.length+t.selfProblems.length)).reverse()}catch(s){if(s instanceof F&&((a=s.response)==null?void 0:a.status)===404){u.value.error((await s.response.json()).errors[0].message);return}u.value.error("Sorry, an error has occurred.")}}function w(a){const s=document.getElementById(`dragon-${a}`);s&&s.scrollIntoView({behavior:"smooth"})}return(a,s)=>{const r=V("font-awesome-icon");return o(),n("div",A,[e("div",L,[e("section",R,[e("div",null,[s[4]||(s[4]=e("h1",null,"Inbred Checker",-1)),s[5]||(s[5]=e("p",null," This utility lets you compare the ancestry of multiple dragons to see whether the results would be inbred. ",-1)),s[6]||(s[6]=e("p",null," The inbred checker will only look at the first 12 generations for each dragon, so ancestry beyond that will not be assessed. ",-1)),e("p",null,[s[2]||(s[2]=p(" Put each code on a new line. Dragons with a ")),c(r,{class:"icon",icon:"times"}),s[3]||(s[3]=p(" above their code are invalid. "))])])]),e("section",M,[e("form",{id:"form",class:"form",onSubmit:s[1]||(s[1]=B(t=>C(),["prevent"]))},[s[7]||(s[7]=e("label",{for:"input",class:"label"},"Dragons to check",-1)),c(S,{id:"input",modelValue:f.value,"onUpdate:modelValue":s[0]||(s[0]=t=>f.value=t),type:"textarea",autocomplete:"off",spellcheck:"false",rows:"10"},null,8,["modelValue"]),e("button",{type:"submit",class:"pointer btn",disabled:g.value.filter($(y)).length===0}," Check ",8,Q)],32),c(D,{ref_key:"status",ref:u},null,512)]),e("section",U,[s[8]||(s[8]=e("h2",null,"Preview",-1)),e("ul",null,[(o(!0),n(d,null,h(g.value,t=>(o(),n("li",{key:t},[e("span",W,[$(y)(t)&&!_.value.includes(t)?(o(),n("a",{key:0,href:`https://dragcave.net/lineage/${t}`,target:"_blank",class:"portrait"},[e("img",{class:"picture",src:`https://dragcave.net/image/${t}/1.png`,onError:l=>_.value.push(t)},null,40,z)],8,q)):(o(),N(r,{key:1,class:"icon",icon:"times"}))]),e("span",null,[e("button",{type:"button",class:"code-jump",onClick:l=>w(t)}," ("+i(t)+") ",9,G)])]))),128))])]),b.value.length>0?(o(),n("section",H,[s[13]||(s[13]=e("h2",null,"Results",-1)),e("ul",J,[(o(!0),n(d,null,h(b.value,t=>(o(),n("li",{id:`dragon-${t.code}`,key:t.code,class:"check"},[e("div",O,[e("a",{href:`https://dragcave.net/lineage/${t.code}`,target:"_blank",class:"portrait"},[e("img",{class:"picture",src:`https://dragcave.net/image/${t.code}/1.png`},null,8,Y)],8,X),e("span",null,i(t.name),1),e("span",Z,"("+i(t.code)+")",1)]),e("div",ee,[t.failed>0?(o(),n("p",se,[c(r,{class:"icon",icon:"exclamation-triangle"}),p(" "+i(t.failed)+" dragons couldn't be checked. This is usually because the owner has blocked Lineage Builder. Checks will be unreliable and a manual check should be performed. ",1)])):m("",!0),t.problems.length===0&&t.selfProblems.length===0?(o(),n("p",te,[c(r,{class:"icon",icon:"check"}),s[9]||(s[9]=p(" No problems detected. It isn't inbred, and breeding this dragon to any of the other dragons on your list will not produce inbred offspring. "))])):m("",!0),t.selfProblems.length>0?(o(),n(d,{key:2},[e("p",null,[c(r,{class:"icon",icon:"times"}),s[10]||(s[10]=p(" The following dragons directly appear in the dragon's own lineage multiple times. "))]),e("ul",oe,[(o(!0),n(d,null,h(t.selfProblems,l=>(o(),n("li",{key:l.code},[e("a",{href:`https://dragcave.net/lineage/${l.code}`,target:"_blank",class:"portrait"},[e("img",{class:"picture",src:`https://dragcave.net/image/${l.code}/1.png`},null,8,le)],8,ne),e("span",null,i(l.name),1),e("span",re,"("+i(l.code)+")",1)]))),128))])],64)):m("",!0),t.problems.length>0?(o(),n(d,{key:3},[e("p",null,[c(r,{class:"icon",icon:"times"}),s[11]||(s[11]=p(" When bred with certain dragons on your list, the following dragons would appear multiple times. "))]),e("ul",ae,[(o(!0),n(d,null,h(t.problems,l=>(o(),n("li",{key:l.code},[e("a",{href:`https://dragcave.net/lineage/${l.code}`,target:"_blank",class:"portrait"},[e("img",{class:"picture",src:`https://dragcave.net/image/${l.code}/1.png`},null,8,ce)],8,ie),e("span",null,i(l.name),1),e("span",de,"("+i(l.code)+")",1),e("span",ue,[s[12]||(s[12]=e("abbr",{class:"conflict",title:"conflicts with"},"c/w. ",-1)),e("span",pe,[(o(!0),n(d,null,h(l.conflicts,k=>(o(),n("button",{key:`${l.code}-${k}`,type:"button",class:"code-jump",onClick:fe=>w(k)}," ("+i(k)+") ",9,he))),128))])])]))),128))])],64)):m("",!0)])],8,K))),128))])])):m("",!0)])])}}}),ve=j(me,[["__scopeId","data-v-9c33cd1b"]]);export{ve as default};
